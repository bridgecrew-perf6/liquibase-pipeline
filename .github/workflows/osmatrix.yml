

name: osmatrix


on:
  push:
    branches: [ githubactions_powershell ]
  # pull_request:
  #   branches: [ githubactions_powershell ]


jobs:

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-powershell
  pester-test:
    name: "Test PowerShell on Ubuntu"
    runs-on: ubuntu-latest
    steps:
    - name: "Check out repository code"
      uses: actions/checkout@v2
    # - name: "Perform a Pester test from the command-line"
    #   shell: pwsh
    #   run: Test-Path resultsfile.log | Should -Be $true
    - name: "Perform a Pester test from the Tests.ps1 file"
      shell: pwsh
      run: |
        Invoke-Pester Unit.Tests.ps1 -Passthru

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-powershell
  install-dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install from PSGallery
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module SqlServer, PSScriptAnalyzer

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-package:
    name: "Python package"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"        
    - name: "Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: "Lint with flake8"
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: "Test with pytest"
      run: |
        pytest

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-multiple-versions:
    name: "Using multiple Python versions"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"        

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
  build-python-multiple-versions-ubuntu-2004:
    name: "Using multiple Python versions ubuntu-20.04"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"   

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-specific-version:
    name: "Using a specific Python version ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python 3.x"
      uses: actions/setup-python@v2
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.x'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-os-matrix:
    name: "OS matrix excluding a version"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [2.7, 3.6, 3.7, 3.8, pypy2, pypy3]
        exclude:
          - os: macos-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 3.6

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  python-installing-dependencies:
    name: "Installing dependencies ubuntu-18.04"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Set up Python 3.x"
      uses: actions/setup-python@v2
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.x'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'
    - name: "Cache pip Caching Dependencies"
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-        
    # You can test your matrix by printing the current Python version
    - name: "Display Python version"
      run: python -c "import sys; print(sys.version)"
    - name: "Install dependencies"
      run: python -m pip install --upgrade pip setuptools wheel
    - name: "Install dependencies Requirements file"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 
    - name: "Using Flake8 to lint code"
      run: |
        pip install flake8
        flake8 .         
    - name: "Testing with pytest and pytest-cov"
      run: |
        pip install pytest
        pip install pytest-cov
        pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html            

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-tox:
    name: "Running tests with tox"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [2.7, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: "Install Tox and any other packages"
        run: pip install tox
      - name: "Run Tox"
        # Run tox using the version of Python in `PATH`
        run: tox -e py

# https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python#using-a-specific-python-version
  build-python-artifacts:
    name: "Running tests with tox"
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
        - uses: actions/checkout@v2
        - name: Setup Python # Set Python version
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        # Install pip and pytest
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pytest
        - name: Test with pytest
          run: pytest tests.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        - name: Upload pytest test results
          uses: actions/upload-artifact@v2
          with:
            name: pytest-results-${{ matrix.python-version }}
            path: junit/test-results-${{ matrix.python-version }}.xml
          # Use always() to always run this step to publish test results when there are test failures
          if: ${{ always() }}

#   linux:
#     runs-on: ubuntu-latest #Ubuntu 18.04.5 LTS
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v1
#     - name: "os fingerprinting"
#       run: hostnamectl status

# # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
#   linux-node-js:
#     runs-on: ubuntu-latest #Ubuntu 18.04.5 LTS
#     strategy:
#       matrix:
#         node-version: [8.x, 10.x, 12.x]
#     steps:
#     - uses: actions/checkout@v2
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v1
#       with:
#         node-version: ${{ matrix.node-version }}
#     - name: "os fingerprinting"
#       run: hostnamectl status
#     - run: npm install
#     # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
#     # - run: npm test
#       env:
#         CI: true

# # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
#   windows-node-js:
#     runs-on: windows-latest
#     strategy:
#       matrix:
#         node-version: [8.x, 10.x, 12.x]
#     steps:
#     - uses: actions/checkout@v2
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v1
#       with:
#         node-version: ${{ matrix.node-version }}
#     - name: "osfingerprinting"
#       run: systeminfo | more          
#     - run: npm install
#     # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
#     # - run: npm test
#       env:
#         CI: true

# # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
#   macos-node-js:
#     runs-on: macos-latest
#     strategy:
#       matrix:
#         node-version: [8.x, 10.x, 12.x]
#     steps:
#     - uses: actions/checkout@v2
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v1
#       with:
#         node-version: ${{ matrix.node-version }}
#     - name: "osfingerprinting"
#       run: sw_vers          
#     - run: npm install
#     # - run: npm run build --if-present #npm ERR! enoent This is related to npm not being able to find a file.
#     # - run: npm test
#       env:
#         CI: true


#   ubuntu-2004:
#       runs-on: ubuntu-20.04
#       steps:
#       - name: Checkout
#         uses: actions/checkout@v1
#       - name: "os fingerprinting"
#         run: hostnamectl status
      

#   ubuntu-1804:
#         # Environment variables
#         # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables
#         env:
#           # FIRST_NAME: Mona
#           OPERATION: "update"
#           CHANGELOGFILE: "samplechangelog.h2.sql"
#           USERNAME: "liquibase"
#           PASSWORD: "password"
#           URL: "jdbc:h2:file:./example/h2tutorial"
#         runs-on: ubuntu-18.04
#         container: liquibase/liquibase:4.1 ## Docker Hub image that `container-job` executes in
#         # Service containers to run with `container-job`
#         # https://docs.github.com/en/free-pro-team@latest/actions/guides/about-service-containers#about-service-containers
#         # services: # Label used to access the service container          
#         #   redis: #running liquibase           
#         #     image: liquibase/liquibase:4.1 # Docker Hub image
#         services: # Label used to access the service container          
#           liquibase: #running liquibase           
#             image: liquibase/liquibase:4.1 # Docker Hub image
#         # runs: 
#         #   using: 'docker'
#         #   image: 'docker://debian:stretch-slim'
#         steps:
#         - name: Checkout
#           uses: actions/checkout@v1
        # - name: "os fingerprinting"
        #   run: hostnamectl status 
        # - name: "docker run"
        #   run: | 
        #       docker run \ 
        #       --rm -v $(pwd):$(pwd)\ liquibase/liquibase:4.1 \
        #       --classpath=$(pwd)/changelogs \
        #       --url=$URL \
        #       --changeLogFile=$CHANGELOGFILE \
        #       --username=$USERNAME \
        #       --password=$PASSWORD $OPERATION
        # - name: "docker ps -a"
        #   run: docker ps -a           
        # - name: "test env"
        #   run: echo $URL

  # windows:
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "check if server is virtual"
  #     run: Systeminfo | findstr /i model   
  #   - name: "check the PROCESSOR_ARCHITECTURE environment variable.64-bit systems will say AMD64 and 32-bit systems should say x86"
  #     run: wmic OS get OSArchitecture     
  #   - name: "osfingerprinting"
  #     run: systeminfo | more  
  #   - name: "display all processes, executable path"
  #     run: wmic process list full         
  #   - name: "list of running services"
  #     run: tasklist         
  #   - name: "list of all processes along with their corresponding PID, and services that are tied to them"
  #     run: tasklist /svc  
  #   - name: "look for unusual services"
  #     run: net start                       
  #   - name: "query unusual services"
  #     run: sc query  

  # macos:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1
  #   - name: "brew update"
  #     run: brew update      
  #   - name: "brew upgrade"
  #     run: brew upgrade
  #   - name: "check on brew version"
  #     run: brew --version   #Homebrew 2.5.12   
  #   - name: "brew cask list"
  #     run:   brew list --cask #Warning: Calling brew cask list is deprecated! Use brew list [--cask] instead.
  #   - name: "brew list"
  #     run: brew list #List all the installed formulas
  #   - name: "Get OS X System Version"
  #     run: sw_vers       
  #   - name: "Get Mac System Details with system_profiler"
  #     run: system_profiler | more  
  #   - name: "osfingerprinting"
  #     run: uname -a                           
    # - name: "brew doctor"
    #   run: |
    #     brew doctor #Check brew for potential problems         